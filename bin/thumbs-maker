#!/usr/bin/env python3

import argparse as ap
import sys
import os
import pathlib as plb
import subprocess
import tempfile
import hashlib
import logging

_OVERRIDE=False
logging.basicConfig(level=logging.DEBUG, encoding='utf-8')
_l=logging.getLogger(__name__)

def _ext(path: str):
    return plb.Path(path).suffix.replace(".","").lower()

def _checksum(path: str) -> str:
    return hashlib.md5(open(path,'rb').read()).hexdigest()

def _thumb_img(input_path, output_path):
    _l.debug("thumbing img")
    out = os.system(f'convert -resize 800x "{input_path}" "{output_path}"')
    _l.debug(out)

def _make_thumb_movie(path, temp_path, thumb_path):
    _l.debug("converting movie")
    out = os.system(f'ffmpeg -i "{path}" -vf "select=eq(n\,34)" -vframes 1 "{temp_path}"')
    _l.debug(out)
    _thumb_img(f"{temp_path}", f"{thumb_path}")
    _l.debug(out)
    plb.Path(temp_path).unlink()

def _make_thumb_img(path, tempdir, thumb_path):
    _l.debug("converting img")
    _thumb_img(path,f"{thumb_path}")

def _make_thumb(parent_path, file_path, tempdir, tn_folder):
    movie_exts = {'mp4', 'mts', 'mpg', '3gp', 'wmv', 'mov', 'thm'}
    img_exts ={'jpg', 'jpeg', 'png'}
    ext=_ext(file_path)
    csum = _checksum(file_path)
    _l.debug("csum: %s %s", csum, file_path)
    
    
    thumb_dir=plb.Path(tn_folder)
    thumb_dir.mkdir(parents=True, exist_ok=True)

    if ext in movie_exts:
        tn_name = csum + '_' + plb.Path(file_path).name + ".png"
        thumb_path = plb.Path(thumb_dir, tn_name)
        temp_path=plb.Path(tempdir,tn_name)

        if thumb_path.exists() and not _OVERRIDE:
            _l.error(f"tn {thumb_path} exists, skipping: {file_path}")
            return

        _make_thumb_movie(file_path, temp_path, thumb_path)
    elif ext in img_exts:
        tn_name = csum + '_' + plb.Path(file_path).name
        thumb_path = plb.Path(thumb_dir, tn_name)
        temp_path=plb.Path(tempdir,tn_name)
        
        if thumb_path.exists() and not _OVERRIDE:
            _l.error(f"tn {thumb_path} exists, skipping: {file_path}")
            return

        _make_thumb_img(file_path, temp_path, thumb_path)
    else:
        print(f"Unrecognized ext: {file_path}")

def _main(args: dict):
    with tempfile.TemporaryDirectory("_thmbs","kl_") as tempdir:
        file_grouping = dict({})
        folder = args["rootpath"]
        tn_folder = args["thumbs_folder"]
        for currentpath, folders, files in os.walk(folder):
            for file_name in files:
                file_path = plb.Path(currentpath, file_name)
                ext=_ext(file_path)
                if ext not in file_grouping:
                    file_grouping[ext] = []
                
                file_grouping[ext].append(str(file_path))
                _make_thumb(currentpath, file_path, tempdir, tn_folder)

#            break
                # print(str(output))

        print(file_grouping.keys())
        # print(file_grouping[''])
        

def _argv(sysargs):
    parser = ap.ArgumentParser()
    
    parser.add_argument('rootpath')
    parser.add_argument('thumbs_folder')
    args = parser.parse_args(sysargs[1:])
    args_dict = vars(args)

    return args_dict

if __name__=="__main__":
    args = _argv(sys.argv)
    _main(args)
